import os

import pandas as pd

template_dataframe =  pd.DataFrame ( 
   { "User" : pd.Series(dtype = 'str'),
    "Gesture Type" : pd.Series(dtype = 'str'),
    "Random Iteration" : pd.Series(dtype = 'int'),
    "Number Of Training Examples" : pd.Series(dtype = 'int'),
    "Total Size Of Training Set" : pd.Series(dtype = 'int'),
    "Training Set Contents" : pd.Series(dtype= 'object'),
    "Candidate" : pd.Series(dtype = 'str'),
    "Recognizer Result Gesture Type" : pd.Series(dtype = 'str'),
    "Result" : pd.Series(dtype = 'str'),
    "Recognizer Result Score" : pd.Series(dtype = 'float'),
    "Recognizer Result Best Match" : pd.Series(dtype = 'str'),
    "Recognizer Resilr N Best Sorted" : pd.Series(dtype= 'object')
   }
)

def create_empty_dataframe():
    """
    Utility Method to create an empty dataframe according to the template
    :param : None
    :return : Empty Pandas Dataframe.
    """
    temp_dataframe = pd.DataFrame(data = None , columns = template_dataframe.columns, index = template_dataframe.index)
    
    return temp_dataframe


def add_data_to_dataframe(dataframe , user, gesture_type, iteration_number, number_of_training_examples, training_set_size, training_set, final_candidate_gesture, recognized_gesture, recognition_result, recognition_score, best_match, sorted_scores):
    """
    Utility Method to add the result data to to the dataframe.
    :param dataframe: The dataframe to which the data points from the test needs to be appended as a new row
    :param user : User ID from the XML 
    :param gesture_type : Gesture provided by the user
    :param iteration_number : random Iteration Number
    :param number_of_training_examples : number of training examples from the XML
    :param training_set_size : size of the training set
    :param training_set_contents : training set generated by randomly picking one sample for each gesture from the input XML dataset
    :param final_candidate_gesture : string concatenated with the userID, gesture type and randomly picked sample number
    :param recognized_gesture : gesture identified by the recognizer algorithm
    :param recognition_result : Boolean value for correctness of the recognizer
    :param recognition_score : score generated by the algorithm
    :param best_match : final_candidate_gesture based on the recognition scores
    :param sorted_scores : recognition scores for candidate in sorted order.
    
    :return : Updated Dataframe
    """
    if (dataframe.equals(template_dataframe)):
        temp_dict ={ "User" : user,
                            "Gesture Type" : gesture_type,
                            "Random Iteration" : iteration_number,
                            "Number Of Training Examples" : number_of_training_examples,
                            "Total Size Of Training Set" : training_set_size,
                            "Training Set Contents" : training_set,
                            "Candidate" : final_candidate_gesture,
                            "Recognizer Result Gesture Type" : recognized_gesture,
                            "Result" : recognition_result,
                            "Recognizer Result Score" : recognition_score,
                            "Recognizer Result Best Match" : best_match,
                            "Recognizer Resilr N Best Sorted" : sorted_scores
                        }

        temp_dataframe = pd.DataFrame(temp_dict)

        dataframe = dataframe.append(temp_dataframe, ignore_index = True)

        return dataframe
    
    else:
        return "Error"  #can use raise exception for this, based on main function loop.


def convert_dataframe_to_csv (dataframe, filepath):
    """
    Utility Method to convert dataframe to csv
    :param dataframe: Final dataframe as pandas dataframe
    :param filepath : Path of the current working directory
    :return :
    """
    # output_file_path = filepath + "\export_dataframe.csv"
    output_file_path = os.getcwd() + "\\output.csv"
    dataframe.to_csv(output_file_path, index=False, header=True)

    #path os library  can be used for getthing the

def add_list_to_dataframe(dataframe, row):
    """
    Utility Method to add the result data to to the dataframe.
    :param dataframe: The pandas dataframe to which the data points from the test needs to be appended as a new row
    :param row : The entire row in the output in the form of list of lists
    :return : Updated Pandas Dataframe
    """
    temp_dataframe = dataframe.copy()

    temp_dataframe.loc[len(temp_dataframe)] = row
    temp_dataframe.concat

    return temp_dataframe


# writing to xml file
def save_to_xml(points, label, user, count):
    num_pts = len(points)
    directory = './data_collection/{}/'.format(user)
    file_name = '{}{}.xml'.format(label, count)

    try:
        os.mkdir(directory)
    except:
        pass

    with open(directory+file_name, 'x') as f:
        f.write('<?xml version="1.0" encoding="utf-8" standalone="yes"?>\n')
        f.write('<Gesture Name="{}{}" Subject="{}" Number="{}" NumPts="{}"/>\n'.format(label, count, user, count, num_pts))

        for pt in points:
            f.write('<Point X="{}" Y="{}" />\n'.format(pt[0], pt[1]))

        f.write('</Gesture>')

